import os
import shutil
from typing import Literal

from game.核心.基础异常 import 文件异常, 文件不存在
from game.核心.基础数据类 import 字典, 文本
from game.核心.基础数据类型 import 空, 文本类型, 是或否
from game.核心.基类.文件 import 文件

__文件打开方式 = Literal[
    "只读", "只写", "读写", "追加写入", "追加读写", "二进制读", "二进制写", "二进制读写"
]
__文件打开方式映射 = 字典(
    {
        "只读": "r",
        "只写": "w",
        "读写": "w+",
        "追加写入": "a",
        "追加读写": "a+",
        "二进制读": "rb",
        "二进制写": "wb",
        "二进制读写": "wb+",
        "二进制追加写入": "ab",
        "二进制追加读写": "ab+",
    }
)

__打开方式_python = [
    "r+",
    "+r",
    "rt+",
    "r+t",
    "+rt",
    "tr+",
    "t+r",
    "+tr",
    "w+",
    "+w",
    "wt+",
    "w+t",
    "+wt",
    "tw+",
    "t+w",
    "+tw",
    "a+",
    "+a",
    "at+",
    "a+t",
    "+at",
    "ta+",
    "t+a",
    "+ta",
    "x+",
    "+x",
    "xt+",
    "x+t",
    "+xt",
    "tx+",
    "t+x",
    "+tx",
    "w",
    "wt",
    "tw",
    "a",
    "at",
    "ta",
    "x",
    "xt",
    "tx",
    "r",
    "rt",
    "tr",
    "U",
    "rU",
    "Ur",
    "rtU",
    "rUt",
    "Urt",
    "trU",
    "tUr",
    "Utr",
]


def 打开文件(_文件地址, _打开方式: __文件打开方式 = "只读", _字符类型="utf8"):
    """
    打开文件来对文件进行操作。
    :param _文件地址: 文件的路径。
    :param _打开方式: 打开方式，只定义了一些常用，如果有特殊需求，直接传入open的就行，注意：追加写入和追加读写都需要文件存在才能写入，不然会报错，
            其他的可以自动创建文件，但是存放写入的文件夹要存在，因为只能自动创建文件，不能创建文件夹
    :param _字符类型: 默认utf8，为了支持中文，建议都用utf8，没需求可以不填，有需求请自己填python的
    :return:
    """
    if _打开方式 not in __文件打开方式映射.键() and _打开方式 not in __打开方式_python:
        raise Exception(f"{_文件地址}的打开方式不存在")

    __打开方式 = __文件打开方式映射.取出(_打开方式)
    if __打开方式 is 空:
        __打开方式 = _打开方式

    return 文件(open(_文件地址, __打开方式, encoding=_字符类型))


def 拼接文件路径(*_要拼接的路径) -> 文本类型:
    """
    使用方法 拼接文件路径('game/ai', 'skill.txt') 返回结果: '/game/ai/skill.txt'
    :param _要拼接的路径: 多个参数
    :return:
    """
    return 文本(os.path.join(*_要拼接的路径))


def 文件是否存在(_文件地址) -> 是或否:
    """

    :param _文件地址:
    :return:  是/否
    """
    return os.path.exists(_文件地址)


def 获取文件所处文件夹(_文件地址: 文本类型) -> 文本类型:
    """
    返回获取所有文件夹地址
    :param _文件地址:
    :return:
    """
    return 文本(os.path.basename(_文件地址))


def __判断文件是否存在并抛出异常(_文件地址):
    if not 文件是否存在(_文件地址):
        raise 文件不存在(f"{_文件地址}不存在")


def 删除文件(_文件地址: 文本类型):
    """
    根据文件地址删除文件
    :param _文件地址: 要删除的文件地址
    :return:
    """
    __判断文件是否存在并抛出异常(_文件地址)
    os.remove(_文件地址)


def 删除文件夹(_文件夹地址: 文本类型):
    """
    根据文件夹地址删除文件
    :param _文件夹地址: 要删除的文件夹地址
    :return:
    """
    __判断文件是否存在并抛出异常(_文件夹地址)
    shutil.rmtree(_文件夹地址)


def 复制文件(_源文件地址, _目标地址):
    """
    将 _源文件地址 的文件/文件夹 复制到 _模板地址
    :param _源文件地址: 需要复制的文件
    :param _目标地址: 复制保存的地方
    :return:
    """
    if not 文件是否存在(_源文件地址):
        raise 文件不存在(f"源文件地址:{_源文件地址}不存在")

    if not 文件是否存在(获取文件所处文件夹(_目标地址)):
        raise 文件不存在(f"复制目标文件夹不存在, {获取文件所处文件夹(_目标地址)}")

    shutil.copy(_源文件地址, _目标地址)


def 剪切文件(_源文件地址, _目标地址):
    """
    将 _源文件地址 的文件/文件夹 剪切到 _模板地址
    :param _源文件地址: 要剪切的文件
    :param _目标地址: 剪切保存地址
    :return:
    """
    if not 文件是否存在(_源文件地址):
        raise 文件不存在(f"源文件地址:{_源文件地址}不存在")

    if not 文件是否存在(获取文件所处文件夹(_目标地址)):
        raise 文件不存在(f"复制目标文件夹不存在, {获取文件所处文件夹(_目标地址)}")

    shutil.move(_源文件地址, _目标地址)


def 创建文件夹(_文件夹存储地址, _文件夹名称):
    """
    创建文件夹。可以嵌套创建，假设，文件夹存储地址 不存在，会将存储地址的文件夹也创建出来
    :param _文件夹存储地址: 文件夹存放的路径
    :param _文件夹名称: 文件夹名称
    :return:
    """
    _文件夹路径 = 拼接文件路径(_文件夹存储地址, _文件夹名称)
    os.makedirs(_文件夹路径)


def 是否为文件(_判断的地址) -> 是或否:
    """

    :param _判断的地址:
    :return: 是/否
    """
    return os.path.isfile(_判断的地址)


def 是否为文件夹(_判断的地址) -> 是或否:
    """

    :param _判断的地址:
    :return: 是/否
    """
    return os.path.isdir(_判断的地址)


__all__ = [
    "打开文件",
    "拼接文件路径",
    "文件是否存在",
    "获取文件所处文件夹",
    "删除文件",
    "删除文件夹",
    "复制文件",
    "剪切文件",
    "创建文件夹",
    "是否为文件",
    "是否为文件夹",
]
