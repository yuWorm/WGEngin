from typing import Type

from game.核心.基础属性 import 基础异常
from game.核心.基础数据类型 import 字典类型, 任意值, 文本类型, 无
from game.核心.基类.游戏.区域 import 区域基类
from game.核心.基类.游戏.地图 import 地图基类
from game.核心.基类.游戏.技能 import 技能基类
from game.核心.数据.游戏数据 import *

__游戏数据名称映射 = {
    "技能": 技能表,
    "怪物": 怪物表,
    "NPC": NPC表,
    "地图表": 地图表,
    "页面": 页面表,
}


def 注册(_注册数据类型: 文本类型, _名称: 文本类型, _类: 任意值) -> 无:
    """
    用于注册游戏，也就是将如地图之类的加入到内存中
    :param _注册数据类型: 需要注册的游戏数据名称
    :param _名称: 数据名称
    :param _类: 数据的类对象
    :return:
    """
    if _注册数据类型 not in __游戏数据名称映射:
        raise 基础异常("数据类型不存在")

    __游戏数据名称映射[_注册数据类型][_名称] = _类


def 添加技能(_技能类: Type[技能基类]):
    """
    将定义好的技能添加到内存中，方便后面调用
    :param _技能类:
    :return:
    """
    注册("技能", _技能类.技能名称, _技能类)


def 添加区域(_区域类: Type[区域基类], **kwargs):
    if _区域类.区域名称 in 区域表:
        区域表[_区域类.区域名称].update({"class": _区域类, "data": kwargs})
        return

    注册("区域", _区域类.区域名称, _区域类)


def 添加地图(_地图类: Type[地图基类]):
    """
    :param _地图类:

    :return:
    """
    注册("地图", _地图类.地图名称, _地图类)

    if _地图类.区域 not in 区域表:
        区域表[_地图类.区域] = {"maps": _地图类.地图名称}
        return

    _区域地图列表 = 区域表[_地图类.区域].get("maps")
    if not _区域地图列表:
        区域表[_地图类.区域]["maps"] = [_地图类.地图名称]
        return

    if _地图类.地图名称 not in _区域地图列表:
        _区域地图列表.append(_地图类.地图名称)


def 添加页面(_页面类: Type[页面基类]):
    注册("页面", _页面类.页面名称(), _页面类)
